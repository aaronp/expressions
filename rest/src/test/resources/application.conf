app {
  kafka {
    topic: "<random>"
    brokers: "localhost:9092"
    groupId: "<random>"
    offset: earliest

    key.deserializer : "org.apache.kafka.common.serialization.StringDeserializer"
    key.serializer : "org.apache.kafka.common.serialization.StringSerializer"

    value.deserializer : "io.confluent.kafka.serializers.KafkaAvroDeserializer"
    value.serializer : "io.confluent.kafka.serializers.KafkaAvroSerializer"
  }

  schemas: {
    # the url of the schema registry REST service
    schema.registry.url: "http://localhost:8081"
    auto.register.schemas: true
    key.subject.name.strategy: "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy"
    value.subject.name.strategy: "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy"
    isForRecordKeys: false
  }

  logHeaders: true
  logBody: true

  disk: "target/testdata/."
  data: ${app.disk}

  mapping {
    "unit-test": "target/data/unittest.sc",
    "mapping-test*": "map.ping"
  }

  www {
    htmlDir: "rest/src/main/resources/www"
    jsDir: "client/js/target/scala-2.13/"

    resourceMapping: {
      "app.js": "client-js-fastopt/main.js"
      "app-deps.js": "client-js-fastopt.js"
    }
  }
}